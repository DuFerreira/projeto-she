(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'descricao'"
p3
sS'layer'
p4
S'/opt/web2py/applications/she/controllers/rest.py'
p5
sS'code'
p6
S'@request.restful()\ndef api():\n    table_name = request.args(2)\n    \'\'\'response.view = \'generic.\'+request.extension   \'\'\'\n    def GET(*args,**vars):\n        patterns = [\n        "/teste[turmas]",\n        "/teste/{disciplinas.disciplina.startswith}",\n        "/teste/{disciplinas.disciplina.startswith}/:field",\n        "/teste/{disciplinas.disciplina}/:field",\n        "/teste/{disciplinas.disciplina}/testa[turmas.turma]",\n        "/teste/{disciplinas.disciplina}/testa[turmas.turma]/{turmas.professor}",\n        "/teste/{disciplinas.disciplina}/teste[turmas.turma]/{turmas.professor}/:field"\n        ]\n        parser = db.parse_as_rest(patterns,args,vars)\n        if parser.status == 200:\n            return dict(content=parser.response)\n        else:\n            raise HTTP(parser.status,parser.error)\n    def POST(table_name,**vars):\n        retornar = (db[table_name].validate_and_insert(**vars))\n        if(retornar[\'errors\']==None):\n            return dict(retornar=\'Frase n\xc3\xbamero \'+retornar[\'id\']+\' inserida com sucesso\')\n        \n    def PUT(table_name,record_id,**vars):\n        return db(db[table_name]._id==record_id).update(**vars)\n    def DELETE(table_name,record_id):\n        return db(db[table_name]._id==record_id).delete()\n    return dict(GET=GET, POST=POST, PUT=PUT, DELETE=DELETE)\n\nresponse._vars=response._caller(api)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/opt/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/opt/web2py/applications/she/controllers/rest.py", line 31, in <module>\n  File "/opt/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/web2py/gluon/globals.py", line 380, in f\n    res = rest_action(*request.args, **request.vars)\n  File "/opt/web2py/applications/she/controllers/rest.py", line 15, in GET\n    parser = db.parse_as_rest(patterns,args,vars)\n  File "/opt/web2py/gluon/packages/dal/pydal/base.py", line 782, in parse_as_rest\n    count = dbset.count()\n  File "/opt/web2py/gluon/packages/dal/pydal/objects.py", line 2010, in count\n    return db._adapter.count(self.query, distinct)\n  File "/opt/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1321, in count\n    self.execute(self._count(query, distinct))\n  File "/opt/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1308, in _count\n    sql_w = \' WHERE \' + self.expand(query)\n  File "/opt/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/opt/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/opt/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/opt/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/opt/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/opt/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1442, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'descricao\'\n'
p11
s.